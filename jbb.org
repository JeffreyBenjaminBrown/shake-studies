* questions
* rules look lke this
** this
<pattern> %> \out -> do
    <actions>
(where the angle brackets aren't missing)
** Whatever matches "pattern" is bound to "out" in the lambda.
* use fewer calls to need, if possible
** how: make the list argument to "need" longer
rather than calling it more than once in the same do-expression
** why: "multiple files required by a need can be built in parallel"
* avoid circularities
"You should only use getDirectoryFiles on source files, not files that are generated by the build system, otherwise the results will change while you are running the build and the build may be inconsistent."
* TODO `phony` is confusing to me
https://shakebuild.com/manual
* cmd_
** takes any number of space-separated args
cmd_ "gcc -o _make/run _build/main.o _build/constants.o"
cmd_ ["gcc","-o","_make/run","_build/main.o","_build/constants.o"]
** enclose unknown strings in []s
 "[For cmd_ to] properly handle unknown string variables it is recommended to enclose them in a list, e.g. [out], so that even if out contains a space it will be treated as a single argument."
* some string operators
** // is like * for paths
*** "The * wildcard matches anything apart from a directory separator. For example "manual/*.txt" would define a rule for any .txt file in the manual directory, including manual/examples.txt, but would not match manual/examples.zip, examples.txt or manual/docs/examples.txt."
*** "The // wildcard matches any number of complete path components. For example //*.txt would define a rule for any .txt file, including manual/examples.txt."
** `<.> exe` adds an extension if OS-appropriate
** use -<.> to strip an extension and replace it
*** TODO What if there are multiple dots in the name?
* to redirect output (ala piping with > or >>)
  "_build/test.txt" %> \_ ->
    cmd "echo testing"
    >>= \(Stdout x) -> writeFile' "_build/test.txt" x
* What "$@" means in `&& _shake/build "$@"
** I think it's a magic Bash operator to hand all arguments from caller to callee
https://www.quora.com/What-does-%E2%80%9C-%E2%80%9D-mean-in-Bash
** why I ask
It's part of build.sh in the shake demo:

#!/bin/sh
mkdir -p _shake
ghc --make Build.hs -rtsopts -threaded -with-rtsopts=-I0 -outputdir=_shake -o _shake/build && _shake/build "$@"
* How to run shake from a docker container
** DONE inelegant but easy fix: use --allow-different-user
stack exec ./build.sh --allow-different-user
** what happens when I try without that option
(base) root@127:/mnt# stack exec ./build.sh
You are not the owner of '/mnt/.stack-work/'. Aborting to protect file permissions.
Retry with '--allow-different-user' to disable this precaution.
(base) root@127:/mnt# ls -al | grep ".stack-work"
drwxrwxr-x  6 1000 1000 4096 Nov 30 19:39 .stack-work
(base) root@127:/mnt# whoami
root
(base) root@127:/mnt# id
uid=0(root) gid=0(root) groups=0(root)
** the container
https://github.com/JeffreyBenjaminBrown/tax.co/blob/master/docker/Dockerfile
